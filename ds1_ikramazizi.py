# -*- coding: utf-8 -*-
"""DS1-IKRAMAZIZI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_qgazh4x_FzrFbkRqIhTkWKhf2bAThQz

# Solution
Chargement du package
"""

# Installation via pip
!pip install pandas numpy matplotlib seaborn scikit-learn jupyter

"""Cette cellule importe les bibliothèques requises : pandas pour la manipulation des données, numpy pour les opérations numériques, matplotlib et seaborn pour la visualisation des données."""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""Cette cellule charge l'ensemble de données à partir d'une URL spécifiée dans un DataFrame pandas."""

# Charger un dataset en ligne (exemple : ventes d'une entreprise)
url = "https://raw.githubusercontent.com/datasets/gdp/master/data/gdp.csv"
df = pd.read_csv(url)

df

# Afficher les premières lignes
print(df.head())

"""Jeux de donnees"""

# Informations sur le dataset
print(df.info())

# Statistiques descriptives
print(df.describe())

"""CONFIGURATION DE DONNEES"""

# Statistiques pour une colonne spécifique
colonne = df['Value']  # Adapter selon vos données

"""Code Python - Statistiques descriptives :"""

#Calcul de la moyenne
print(f"Moyenne: {colonne.mean():.2f}")
#Calcul de la Médiane
print(f"Médiane: {colonne.median():.2f}")
#Calcul de la Mode
print(f"Mode: {colonne.mode()[0]:.2f}")
#Calcul de la Écart-type
print(f"Écart-type: {colonne.std():.2f}")
#Calcul de la Variance
print(f"Variance: {colonne.var():.2f}")
#Calcul de Min
print(f"Min: {colonne.min():.2f}")
#Calcul de l' etude
print(f"Max: {colonne.max():.2f}")

"""Visualisation des Statistiques Descriptives"""

# Quartiles
print(f"Q1 (25%): {colonne.quantile(0.25):.2f}")
print(f"Q2 (50% - Médiane): {colonne.quantile(0.50):.2f}")
print(f"Q3 (75%): {colonne.quantile(0.75):.2f}")
print(f"IQR: {colonne.quantile(0.75) - colonne.quantile(0.25):.2f}")

"""Visualisation des Statistiques Descriptives

note fig, axes = plt.subplots(2, 2, figsize=(14, 10))= 2 lignes 2 colonnes
"""

# Configuration du style
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (12, 8)

# Créer une figure avec plusieurs sous-graphiques
fig, axes = plt.subplots(2, 2, figsize=(14, 10))

# 1. Histogramme
axes[0, 0].hist(colonne, bins=30, edgecolor='black', alpha=0.7)
axes[0, 0].set_title('Distribution des valeurs', fontsize=14, fontweight='bold')
axes[0, 0].set_xlabel('Valeur')
axes[0, 0].set_ylabel('Fréquence')

# Ajouter la moyenne et la médiane
axes[0, 0].axvline(colonne.mean(), color='red', linestyle='--',
                   label=f'Moyenne: {colonne.mean():.2f}')
axes[0, 0].axvline(colonne.median(), color='green', linestyle='--',
                   label=f'Médiane: {colonne.median():.2f}')
axes[0, 0].legend()

# 2. Boxplot
axes[0, 1].boxplot(colonne.dropna(), vert=True)
axes[0, 1].set_title('Boxplot - Détection des outliers', fontsize=14, fontweight='bold')
axes[0, 1].set_ylabel('Valeur')

# 3. Densité
colonne.plot(kind='density', ax=axes[1, 0])
axes[1, 0].set_title('Courbe de densité', fontsize=14, fontweight='bold')
axes[1, 0].set_xlabel('Valeur')

# 4. QQ-plot (pour tester la normalité)
from scipy import stats
stats.probplot(colonne.dropna(), dist="norm", plot=axes[1, 1])
axes[1, 1].set_title('Q-Q Plot (Test de normalité)', fontsize=14, fontweight='bold')

plt.tight_layout()
plt.show()

"""Cette ligne de code `fig, axes = plt.subplots(2, 2, figsize=(14, 10))` crée une figure (`fig`) et un ensemble de sous-graphiques (`axes`).
- `2, 2` spécifie que la grille de sous-graphiques aura 2 lignes et 2 colonnes.
- `figsize=(14, 10)` définit la taille de la figure en pouces, ce qui permet d'avoir suffisamment d'espace pour afficher les quatre graphiques.
<img src="téléchargement.png" style="height:464px;margin-right:432px"/>
"""
